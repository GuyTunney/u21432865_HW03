@model u21432865_HW03.Models.MaintainViewModel

<style>
    /* Table container styling */
    .table-container {
        border-radius: 0px;
        overflow: hidden;
        box-shadow: 0px 4px 1px rgba(0, 0, 0, 0.1);
        margin-top: 15px;
        width: 100%;
    }

    /* Header styling */
    .table-custom th {
        background-color: darkgreen; /* Green header color */
        color: white;
        font-weight: bold;
        text-align: center;
    }

    /* Table and cell styling */
    .table-custom {
        width: 100%;
        border-collapse: collapse;
        font-size: 12px; /* Smaller font for table */
    }

        .table-custom td,
        .table-custom th {
            padding: 8px; /* Padding for table cells */
            border-bottom: 1px solid #e0e0e0;
            text-align: center;
        }

        /* Alternate row coloring */
        .table-custom tbody tr:nth-child(even) {
            background-color: #f9f9f9; /* Light gray for alternate rows */
        }

        /* Highlighted row (if needed) */
        .table-custom tbody tr:hover {
            background-color: #e8f5e9; /* Slight green tint for hover effect */
        }
</style>

<div class="container">
    <div class="row">
        <!-- Authors Table -->
        <div class="col-md-6">
            <h3>Authors</h3>
            <button style="margin:10px" class="btn btn-primary" data-toggle="modal" data-target="#createAuthorModal">Create</button>
            <div class="table-container">
                <table class="table table-striped table-custom">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Surname</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var author in Model.Authors)
                        {
                            <tr>
                                <td>@author.Name</td>
                                <td>@author.Surname</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" data-toggle="modal" data-target="#editAuthorModal"
                                            data-id="@author.AuthorId"
                                            data-name="@author.Name"
                                            data-surname="@author.Surname">
                                        Edit
                                    </button>
                                    <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#deleteAuthorModal"
                                            data-id="@author.AuthorId">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Custom Pagination for Authors -->
            <nav aria-label="Author Pagination">
                <ul class="pagination justify-content-center">
                    @{
                        int maxPagesToShow = 6;
                        int authorStartPage = Math.Max(1, Model.CurrentAuthorsPage - maxPagesToShow / 2);
                        int authorEndPage = Math.Min(Model.TotalAuthorsPages, authorStartPage + maxPagesToShow - 1);

                        if (authorEndPage - authorStartPage < maxPagesToShow - 1)
                        {
                            authorStartPage = Math.Max(1, authorEndPage - maxPagesToShow + 1);
                        }
                    }

                    @if (Model.CurrentAuthorsPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { typesPage = Model.CurrentTypesPage, authorsPage = 1, borrowsPage = Model.CurrentBorrowsPage })">«</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { typesPage = Model.CurrentTypesPage, authorsPage = Model.CurrentAuthorsPage - 1, borrowsPage = Model.CurrentBorrowsPage })">‹</a>
                        </li>
                    }

                    @for (int i = authorStartPage; i <= authorEndPage; i++)
                    {
                        if (i == Model.CurrentAuthorsPage)
                        {
                            <li class="page-item active">
                                <span class="page-link">@i</span>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { typesPage = Model.CurrentTypesPage, authorsPage = i, borrowsPage = Model.CurrentBorrowsPage })">@i</a>
                            </li>
                        }
                    }

                    @if (Model.CurrentAuthorsPage < Model.TotalAuthorsPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { typesPage = Model.CurrentTypesPage, authorsPage = Model.CurrentAuthorsPage + 1, borrowsPage = Model.CurrentBorrowsPage })">›</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { typesPage = Model.CurrentTypesPage, authorsPage = Model.TotalAuthorsPages, borrowsPage = Model.CurrentBorrowsPage })">»</a>
                        </li>
                    }
                </ul>
            </nav>
        </div>

        <!-- Types Table -->
        <div class="col-md-6">
            <h3>Types</h3>
            <button style="margin:10px" class="btn btn-primary" data-toggle="modal" data-target="#createTypeModal">Create</button>
            <div class="table-container">
                <table class="table table-striped table-custom">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var type in Model.Types)
                        {
                            <tr>
                                <td>@type.Name</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" data-toggle="modal" data-target="#editTypeModal"
                                            data-id="@type.TypeId"
                                            data-name="@type.Name">
                                        Edit
                                    </button>
                                    <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#deleteTypeModal"
                                            data-id="@type.TypeId">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Custom Pagination for Types -->
            <nav aria-label="Type Pagination">
                <ul class="pagination justify-content-center">
                    @{
                        int typeStartPage = Math.Max(1, Model.CurrentTypesPage - maxPagesToShow / 2);
                        int typeEndPage = Math.Min(Model.TotalTypesPages, typeStartPage + maxPagesToShow - 1);

                        if (typeEndPage - typeStartPage < maxPagesToShow - 1)
                        {
                            typeStartPage = Math.Max(1, typeEndPage - maxPagesToShow + 1);
                        }
                    }

                    @if (Model.CurrentTypesPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { typesPage = 1, authorsPage = Model.CurrentAuthorsPage, borrowsPage = Model.CurrentBorrowsPage })">«</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { typesPage = Model.CurrentTypesPage - 1, authorsPage = Model.CurrentAuthorsPage, borrowsPage = Model.CurrentBorrowsPage })">‹</a>
                        </li>
                    }

                    @for (int i = typeStartPage; i <= typeEndPage; i++)
                    {
                        if (i == Model.CurrentTypesPage)
                        {
                            <li class="page-item active">
                                <span class="page-link">@i</span>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { typesPage = i, authorsPage = Model.CurrentAuthorsPage, borrowsPage = Model.CurrentBorrowsPage })">@i</a>
                            </li>
                        }
                    }

                    @if (Model.CurrentTypesPage < Model.TotalTypesPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { typesPage = Model.CurrentTypesPage + 1, authorsPage = Model.CurrentAuthorsPage, borrowsPage = Model.CurrentBorrowsPage })">›</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { typesPage = Model.TotalTypesPages, authorsPage = Model.CurrentAuthorsPage, borrowsPage = Model.CurrentBorrowsPage })">»</a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    </div>

    <!-- Borrows Table -->
    <div class="row">
        <div class="col-md-12">
            <h3>Borrows</h3>
            <button style="margin:10px" class="btn btn-primary" data-toggle="modal" data-target="#createBorrowModal">Create</button>
            <div class="table-container">
                <table class="table table-striped table-custom">
                    <thead>
                        <tr>
                            <th>Student</th>
                            <th>Book</th>
                            <th>Taken Date</th>
                            <th>Brought Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var borrow in Model.Borrows)
                        {
                            <tr>
                                <td>@borrow.Student.Name @borrow.Student.Surname</td>
                                <td>@borrow.Book.Name</td>
                                <td>@borrow.TakenDate.ToShortDateString()</td>
                                <td>@(borrow.BroughtDate.HasValue ? borrow.BroughtDate.Value.ToShortDateString() : "Not Returned")</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" data-toggle="modal" data-target="#editBorrowModal"
                                            data-id="@borrow.BorrowId"
                                            data-studentid="@borrow.StudentId"
                                            data-bookid="@borrow.BookId"
                                            data-takendate="@borrow.TakenDate.ToShortDateString()"
                                            data-broughtdate="@borrow.BroughtDate?.ToShortDateString()">
                                        Edit
                                    </button>
                                    <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#deleteBorrowModal"
                                            data-id="@borrow.BorrowId">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Custom Pagination for Borrows -->
            <nav aria-label="Borrow Pagination">
                <ul class="pagination justify-content-center">
                    @{
                        int borrowStartPage = Math.Max(1, Model.CurrentBorrowsPage - maxPagesToShow / 2);
                        int borrowEndPage = Math.Min(Model.TotalBorrowsPages, borrowStartPage + maxPagesToShow - 1);

                        if (borrowEndPage - borrowStartPage < maxPagesToShow - 1)
                        {
                            borrowStartPage = Math.Max(1, borrowEndPage - maxPagesToShow + 1);
                        }
                    }

                    @if (Model.CurrentBorrowsPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { typesPage = Model.CurrentTypesPage, authorsPage = Model.CurrentAuthorsPage, borrowsPage = 1 })">«</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { typesPage = Model.CurrentTypesPage, authorsPage = Model.CurrentAuthorsPage, borrowsPage = Model.CurrentBorrowsPage - 1 })">‹</a>
                        </li>
                    }

                    @for (int i = borrowStartPage; i <= borrowEndPage; i++)
                    {
                        if (i == Model.CurrentBorrowsPage)
                        {
                            <li class="page-item active">
                                <span class="page-link">@i</span>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { typesPage = Model.CurrentTypesPage, authorsPage = Model.CurrentAuthorsPage, borrowsPage = i })">@i</a>
                            </li>
                        }
                    }

                    @if (Model.CurrentBorrowsPage < Model.TotalBorrowsPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { typesPage = Model.CurrentTypesPage, authorsPage = Model.CurrentAuthorsPage, borrowsPage = Model.CurrentBorrowsPage + 1 })">›</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { typesPage = Model.CurrentTypesPage, authorsPage = Model.CurrentAuthorsPage, borrowsPage = Model.TotalBorrowsPages })">»</a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- Create Modals for Authors, Types, and Borrows (Add your modal HTML here) -->
<!-- Create Type Modal -->
<div class="modal fade" id="createTypeModal" tabindex="-1" role="dialog" aria-labelledby="createTypeModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createTypeModalLabel">Add New Type</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="typeForm">
                    <div class="form-group">
                        <label for="typeName">Name</label>
                        <input type="text" class="form-control" id="typeName" placeholder="Enter type name" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveTypeBtn">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Create Author Modal -->
<div class="modal fade" id="createAuthorModal" tabindex="-1" role="dialog" aria-labelledby="createAuthorModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createAuthorModalLabel">Add New Author</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="authorForm">
                    <div class="form-group">
                        <label for="authorName">Name</label>
                        <input type="text" class="form-control" id="authorName" placeholder="Enter author's name" required>
                    </div>
                    <div class="form-group">
                        <label for="authorSurname">Surname</label>
                        <input type="text" class="form-control" id="authorSurname" placeholder="Enter author's surname" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveAuthorBtn">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Create Borrow Modal -->
<div class="modal fade" id="createBorrowModal" tabindex="-1" role="dialog" aria-labelledby="createBorrowModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createBorrowModalLabel">Add New Borrow</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="borrowForm">
                    <div class="form-group">
                        <label for="borrowStudent">Student</label>
                        <select class="form-control" id="borrowStudent" required>
                            <!-- Populate this with students -->
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="borrowBook">Book</label>
                        <select class="form-control" id="borrowBook" required>
                            <!-- Populate this with books -->
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="takenDate">Taken Date</label>
                        <input type="date" class="form-control" id="takenDate" required>
                    </div>
                    <div class="form-group">
                        <label for="broughtDate">Brought Date</label>
                        <input type="date" class="form-control" id="broughtDate">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveBorrowBtn">Save changes</button>
            </div>
        </div>
    </div>
</div>
<!-- Edit Author Modal -->
<div class="modal fade" id="editAuthorModal" tabindex="-1" role="dialog" aria-labelledby="editAuthorModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAuthorModalLabel">Edit Author</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editAuthorForm">
                    <input type="hidden" id="editAuthorId" />
                    <div class="form-group">
                        <label for="editAuthorName">Name</label>
                        <input type="text" class="form-control" id="editAuthorName" required>
                    </div>
                    <div class="form-group">
                        <label for="editAuthorSurname">Surname</label>
                        <input type="text" class="form-control" id="editAuthorSurname" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="updateAuthorBtn">Save changes</button>
            </div>
        </div>
    </div>
</div>
<!-- Delete Author Modal -->
<div class="modal fade" id="deleteAuthorModal" tabindex="-1" role="dialog" aria-labelledby="deleteAuthorModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteAuthorModalLabel">Delete Author</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this author?</p>
                <input type="hidden" id="deleteAuthorId" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteAuthorBtn">Delete</button>
            </div>
        </div>
    </div>
</div>
<!-- Edit Type Modal -->
<div class="modal fade" id="editTypeModal" tabindex="-1" role="dialog" aria-labelledby="editTypeModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTypeModalLabel">Edit Type</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editTypeForm">
                    <input type="hidden" id="editTypeId" />
                    <div class="form-group">
                        <label for="editTypeName">Name</label>
                        <input type="text" class="form-control" id="editTypeName" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="updateTypeBtn">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Type Modal -->
<div class="modal fade" id="deleteTypeModal" tabindex="-1" role="dialog" aria-labelledby="deleteTypeModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteTypeModalLabel">Delete Type</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this type?</p>
                <input type="hidden" id="deleteTypeId" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteTypeBtn">Delete</button>
            </div>
        </div>
    </div>
</div>
<!-- Edit Borrow Modal -->
<div class="modal fade" id="editBorrowModal" tabindex="-1" role="dialog" aria-labelledby="editBorrowModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editBorrowModalLabel">Edit Borrow</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editBorrowForm">
                    <input type="hidden" id="editBorrowId" />
                    <div class="form-group">
                        <label for="editBorrowStudent">Student</label>
                        <select class="form-control" id="editBorrowStudent" required>
                            <!-- Populate this with students -->
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="editBorrowBook">Book</label>
                        <select class="form-control" id="editBorrowBook" required>
                            <!-- Populate this with books -->
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="editTakenDate">Taken Date</label>
                        <input type="date" class="form-control" id="editTakenDate" required>
                    </div>
                    <div class="form-group">
                        <label for="editBroughtDate">Brought Date</label>
                        <input type="date" class="form-control" id="editBroughtDate">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="updateBorrowBtn">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Borrow Modal -->
<div class="modal fade" id="deleteBorrowModal" tabindex="-1" role="dialog" aria-labelledby="deleteBorrowModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteBorrowModalLabel">Delete Borrow</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this borrow record?</p>
                <input type="hidden" id="deleteBorrowId" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBorrowBtn">Delete</button>
            </div>
        </div>
    </div>
</div>


<script>
$(document).ready(function () {
    // Function to clear modal fields
    function clearModalFields(modalId) {
        $(modalId).find("input[type=text], input[type=date], select").val('');
    }

    // Save Type
    $('#saveTypeBtn').click(function () {
        var typeData = {
            Name: $('#typeName').val()
        };

        $.ajax({
            type: 'POST',
            url: '@Url.Action("CreateType", "Maintain")',
            data: typeData,
            success: function () {
                $('#createTypeModal').modal('hide');
                location.reload(); // Refresh the page to see new data
            },
            error: function () {
                alert('Error saving type.');
            }
        });
    });

    // Save Author
    $('#saveAuthorBtn').click(function () {
        var authorData = {
            Name: $('#authorName').val(),
            Surname: $('#authorSurname').val()
        };

        $.ajax({
            type: 'POST',
            url: '@Url.Action("CreateAuthor", "Maintain")',
            data: authorData,
            success: function () {
                $('#createAuthorModal').modal('hide');
                location.reload(); // Refresh the page to see new data
            },
            error: function () {
                alert('Error saving author.');
            }
        });
    });

    // Save Borrow
    $('#saveBorrowBtn').click(function () {
        var borrowData = {
            StudentId: $('#borrowStudent').val(), // Ensure these IDs correspond to your data
            BookId: $('#borrowBook').val(),
            TakenDate: $('#takenDate').val(),
            BroughtDate: $('#broughtDate').val()
        };

        $.ajax({
            type: 'POST',
            url: '@Url.Action("CreateBorrow", "Maintain")',
            data: borrowData,
            success: function () {
                $('#createBorrowModal').modal('hide');
                location.reload(); // Refresh the page to see new data
            },
            error: function () {
                alert('Error saving borrow.');
            }
        });
    });

    // Edit Author
    $('#editAuthorModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget);
        var authorId = button.data('id');
        var authorName = button.data('name');
        var authorSurname = button.data('surname');

        var modal = $(this);
        modal.find('#editAuthorId').val(authorId);
        modal.find('#editAuthorName').val(authorName);
        modal.find('#editAuthorSurname').val(authorSurname);
    });

    $('#updateAuthorBtn').click(function () {
        var authorData = {
            AuthorId: $('#editAuthorId').val(),
            Name: $('#editAuthorName').val(),
            Surname: $('#editAuthorSurname').val()
        };

        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateAuthor", "Maintain")',
            data: authorData,
            success: function () {
                $('#editAuthorModal').modal('hide');
                location.reload();
            },
            error: function () {
                alert('Error updating author.');
            }
        });
    });

    // Edit Type
    $('#editTypeModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget);
        var typeId = button.data('id');
        var typeName = button.data('name');

        var modal = $(this);
        modal.find('#editTypeId').val(typeId);
        modal.find('#editTypeName').val(typeName);
    });

    $('#updateTypeBtn').click(function () {
        var typeData = {
            TypeId: $('#editTypeId').val(),
            Name: $('#editTypeName').val()
        };

        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateType", "Maintain")',
            data: typeData,
            success: function () {
                $('#editTypeModal').modal('hide');
                location.reload();
            },
            error: function () {
                alert('Error updating type.');
            }
        });
    });

    // Edit Borrow
    $('#editBorrowModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget);
        var borrowId = button.data('id');
        var studentId = button.data('studentid');
        var bookId = button.data('bookid');
        var takenDate = button.data('takendate');
        var broughtDate = button.data('broughtdate');

        var modal = $(this);
        modal.find('#editBorrowId').val(borrowId);
        modal.find('#editBorrowStudent').val(studentId);
        modal.find('#editBorrowBook').val(bookId);
        modal.find('#editTakenDate').val(takenDate);
        modal.find('#editBroughtDate').val(broughtDate);
    });

    $('#updateBorrowBtn').click(function () {
        var borrowData = {
            BorrowId: $('#editBorrowId').val(),
            StudentId: $('#editBorrowStudent').val(),
            BookId: $('#editBorrowBook').val(),
            TakenDate: $('#editTakenDate').val(),
            BroughtDate: $('#editBroughtDate').val()
        };

        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateBorrow", "Maintain")',
            data: borrowData,
            success: function () {
                $('#editBorrowModal').modal('hide');
                location.reload();
            },
            error: function () {
                alert('Error updating borrow.');
            }
        });
    });

    // Delete modals
    // Authors Delete
    $('#deleteAuthorModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget);
        var authorId = button.data('id');
        $(this).find('#deleteAuthorId').val(authorId);
    });

    $('#confirmDeleteAuthorBtn').click(function () {
        var authorId = $('#deleteAuthorId').val();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("DeleteAuthor", "Maintain")',
            data: { id: authorId },
            success: function () {
                $('#deleteAuthorModal').modal('hide');
                location.reload();
            },
            error: function () {
                alert('Error deleting author.');
            }
        });
    });

    // Types Delete
    $('#deleteTypeModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget);
        var typeId = button.data('id');
        $(this).find('#deleteTypeId').val(typeId);
    });

    $('#confirmDeleteTypeBtn').click(function () {
        var typeId = $('#deleteTypeId').val();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("DeleteType", "Maintain")',
            data: { id: typeId },
            success: function () {
                $('#deleteTypeModal').modal('hide');
                location.reload();
            },
            error: function () {
                alert('Error deleting type.');
            }
        });
    });

    // Borrows Delete
    $('#deleteBorrowModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget);
        var borrowId = button.data('id');
        $(this).find('#deleteBorrowId').val(borrowId);
    });

    $('#confirmDeleteBorrowBtn').click(function () {
        var borrowId = $('#deleteBorrowId').val();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("DeleteBorrow", "Maintain")',
            data: { id: borrowId },
            success: function () {
                $('#deleteBorrowModal').modal('hide');
                location.reload();
            },
            error: function () {
                alert('Error deleting borrow.');
            }
        });
    });
});
</script>

